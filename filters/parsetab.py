
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQUALSNOTEQUALSGREATEREQUALLESSEQUALGREATERLESSAND BOOLEAN COMMA CONTAINS EQUALS FIRST FIRSTC GREATER GREATEREQUAL IDENTIFIER LAST LASTC LESS LESSEQUAL LPAREN NOTEQUALS NUMBER OR RPAREN STRINGexpression : expression EQUALS expression\n                      | expression NOTEQUALS expression\n                      | expression GREATEREQUAL expression\n                      | expression LESSEQUAL expression\n                      | expression GREATER expression\n                      | expression LESS expression\n                      | expression AND expression\n                      | expression OR expressionexpression : LPAREN expression RPARENexpression : CONTAINS LPAREN expression COMMA expression RPARENexpression : FIRST LPAREN expression RPARENexpression : LAST LPAREN expression RPARENexpression : FIRSTC LPAREN expression RPARENexpression : LASTC LPAREN expression RPARENexpression : IDENTIFIERexpression : NUMBERexpression : STRINGexpression : BOOLEAN'
    
_lr_action_items = {'LPAREN':([0,2,3,4,5,6,7,12,13,14,15,16,17,18,19,21,22,23,24,25,40,],[2,2,21,22,23,24,25,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'CONTAINS':([0,2,12,13,14,15,16,17,18,19,21,22,23,24,25,40,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'FIRST':([0,2,12,13,14,15,16,17,18,19,21,22,23,24,25,40,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'LAST':([0,2,12,13,14,15,16,17,18,19,21,22,23,24,25,40,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'FIRSTC':([0,2,12,13,14,15,16,17,18,19,21,22,23,24,25,40,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'LASTC':([0,2,12,13,14,15,16,17,18,19,21,22,23,24,25,40,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'IDENTIFIER':([0,2,12,13,14,15,16,17,18,19,21,22,23,24,25,40,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'NUMBER':([0,2,12,13,14,15,16,17,18,19,21,22,23,24,25,40,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'STRING':([0,2,12,13,14,15,16,17,18,19,21,22,23,24,25,40,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'BOOLEAN':([0,2,12,13,14,15,16,17,18,19,21,22,23,24,25,40,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'$end':([1,8,9,10,11,26,27,28,29,30,31,32,33,34,41,42,43,44,46,],[0,-15,-16,-17,-18,-1,-2,-3,-4,-5,-6,-7,-8,-9,-11,-12,-13,-14,-10,]),'EQUALS':([1,8,9,10,11,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,],[12,-15,-16,-17,-18,12,-1,-2,-3,-4,-5,-6,12,12,-9,12,12,12,12,12,-11,-12,-13,-14,12,-10,]),'NOTEQUALS':([1,8,9,10,11,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,],[13,-15,-16,-17,-18,13,-1,-2,-3,-4,-5,-6,13,13,-9,13,13,13,13,13,-11,-12,-13,-14,13,-10,]),'GREATEREQUAL':([1,8,9,10,11,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,],[14,-15,-16,-17,-18,14,-1,-2,-3,-4,-5,-6,14,14,-9,14,14,14,14,14,-11,-12,-13,-14,14,-10,]),'LESSEQUAL':([1,8,9,10,11,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,],[15,-15,-16,-17,-18,15,-1,-2,-3,-4,-5,-6,15,15,-9,15,15,15,15,15,-11,-12,-13,-14,15,-10,]),'GREATER':([1,8,9,10,11,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,],[16,-15,-16,-17,-18,16,-1,-2,-3,-4,-5,-6,16,16,-9,16,16,16,16,16,-11,-12,-13,-14,16,-10,]),'LESS':([1,8,9,10,11,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,],[17,-15,-16,-17,-18,17,-1,-2,-3,-4,-5,-6,17,17,-9,17,17,17,17,17,-11,-12,-13,-14,17,-10,]),'AND':([1,8,9,10,11,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,],[18,-15,-16,-17,-18,18,-1,-2,-3,-4,-5,-6,-7,18,-9,18,18,18,18,18,-11,-12,-13,-14,18,-10,]),'OR':([1,8,9,10,11,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,],[19,-15,-16,-17,-18,19,-1,-2,-3,-4,-5,-6,-7,-8,-9,19,19,19,19,19,-11,-12,-13,-14,19,-10,]),'RPAREN':([8,9,10,11,20,26,27,28,29,30,31,32,33,34,36,37,38,39,41,42,43,44,45,46,],[-15,-16,-17,-18,34,-1,-2,-3,-4,-5,-6,-7,-8,-9,41,42,43,44,-11,-12,-13,-14,46,-10,]),'COMMA':([8,9,10,11,26,27,28,29,30,31,32,33,34,35,41,42,43,44,46,],[-15,-16,-17,-18,-1,-2,-3,-4,-5,-6,-7,-8,-9,40,-11,-12,-13,-14,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,12,13,14,15,16,17,18,19,21,22,23,24,25,40,],[1,20,26,27,28,29,30,31,32,33,35,36,37,38,39,45,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression EQUALS expression','expression',3,'p_expression_binop','filters_paths.py',135),
  ('expression -> expression NOTEQUALS expression','expression',3,'p_expression_binop','filters_paths.py',136),
  ('expression -> expression GREATEREQUAL expression','expression',3,'p_expression_binop','filters_paths.py',137),
  ('expression -> expression LESSEQUAL expression','expression',3,'p_expression_binop','filters_paths.py',138),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binop','filters_paths.py',139),
  ('expression -> expression LESS expression','expression',3,'p_expression_binop','filters_paths.py',140),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','filters_paths.py',141),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','filters_paths.py',142),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','filters_paths.py',148),
  ('expression -> CONTAINS LPAREN expression COMMA expression RPAREN','expression',6,'p_expression_contains','filters_paths.py',154),
  ('expression -> FIRST LPAREN expression RPAREN','expression',4,'p_expression_first','filters_paths.py',160),
  ('expression -> LAST LPAREN expression RPAREN','expression',4,'p_expression_last','filters_paths.py',166),
  ('expression -> FIRSTC LPAREN expression RPAREN','expression',4,'p_expression_firstc','filters_paths.py',172),
  ('expression -> LASTC LPAREN expression RPAREN','expression',4,'p_expression_lastc','filters_paths.py',178),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','filters_paths.py',184),
  ('expression -> NUMBER','expression',1,'p_expression_number','filters_paths.py',190),
  ('expression -> STRING','expression',1,'p_expression_string','filters_paths.py',196),
  ('expression -> BOOLEAN','expression',1,'p_expression_boolean','filters_paths.py',202),
]
